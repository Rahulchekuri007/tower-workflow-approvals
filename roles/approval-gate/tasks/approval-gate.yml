---
- name: Get information about the user making this request
  uri:
    url: "{{ lookup('env', 'TOWER_HOST') }}/api/v2/me"
    user: "{{ lookup('env', 'TOWER_USERNAME') }}"
    password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
    return_content: yes
    force_basic_auth: yes
    validate_certs: no
  register: user_request
  changed_when: False
- set_fact:
    requester_info: "{{ user_request.json.results[0] }}"
- set_fact:
    approval_job_template_name: Approval Gate Request / {{ approval_gate_name }} / {{ lookup('pipe','date') }}
- name: Get the job that is currently running
  command: >
    tower-cli job get "{{ tower_job_id }}"
    --format json
  register: approval_request_job
  changed_when: False
- set_fact:
    approval_request_job_extra_vars: "{{ (approval_request_job.stdout | from_json).extra_vars | from_json | to_yaml }}"
- name: Create the approval job template
  command: >
    tower-cli job_template create
    --format json
    --force-on-exists
    --name "{{ approval_job_template_name }}"
    --project "{{ approval_project }}"
    --playbook approval.yml
    --inventory "{{ approval_inventory }}"
    --credential "{{ approval_machine_credential }}"
    --extra-vars "{{ approval_request_job_extra_vars }}"
    --extra-vars "{{ additional_extra_vars | to_yaml }}"
    --survey-spec '{{ survey_spec | to_json }}'
    --survey-enabled true
    --job-type run
  vars:
    additional_extra_vars:
      requester:
        first_name: "{{ requester_info.first_name }}"
        last_name: "{{ requester_info.last_name }}"
        email: "{{ requester_info.email }}"
        username: "{{ requester_info.username }}"
        id: "{{ requester_info.id | int }}"
    survey_spec:
      name: ""
      description: ""
      spec:
        - question_description: Do you approve {{ requester_info.username }} to continue through the {{ approval_gate_name }} gate?
          min: null
          default: no
          max: null
          required: true
          choices: |
            yes
            no
          variable: approved
          question_name: Approval
          type: multiplechoice
        - question_description: Explanation for approval decision.
          min: 0
          default: ""
          max: 500
          required: true
          choices: ""
          new_question: true
          variable: explanation
          question_name: Explanation
          type: textarea
  register: approval_job_template
  changed_when: (approval_job_template.stdout | from_json).changed
- name: Attach the tower credential
  command: >
    tower-cli job_template associate_credential
    --format json
    --job-template "{{ approval_job_template_name }}"
    --credential "{{ approval_gate_tower_credential }}"
  register: attach_tower_cred
  changed_when: (attach_tower_cred.stdout | from_json).changed
# - name: Add labels to the approval job template
# - name: schedule the approval job to run periodically to remind of approval existing
- name: Add permission to execute the job template to the approver team
  command: >
    tower-cli role grant
    --format json
    --job-template "{{ approval_job_template_name }}"
    --team "{{ approval_gate_team }}"
    --type execute
  register: grant_permission
  changed_when: (grant_permission.stdout | from_json).changed
- name: Send an email to the approver notifying them of this request
  debug:
    msg: "{{ requester_info.username }} is requesting to continue through the {{ approval_gate_name }} gate"
- name: Send an email to the requester notifying them of this request
  debug:
    msg: your request to run continue through the {{ approval_gate_name }} gate has been created
